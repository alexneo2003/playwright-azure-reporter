name: Beta Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to release from (optional, defaults to main)'
        required: false
        default: 'main'

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '>=18'

      - name: Install dependencies
        run: yarn --ignore-engines

      - name: Build project
        run: yarn build

      - name: Run tests
        run: yarn test:reporter

  beta-release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Load beta release configuration
        id: config
        run: |
          if [ -f ".beta-release.json" ]; then
            echo "Configuration file found"
            ENABLED=$(jq -r '.betaRelease.enabled // true' .beta-release.json)
            VERSION_STRATEGY=$(jq -r '.betaRelease.versionStrategy // "patch"' .beta-release.json)
            PUBLISH_TAG=$(jq -r '.betaRelease.publishTag // "beta"' .beta-release.json)
            CREATE_GITHUB_RELEASE=$(jq -r '.betaRelease.createGitHubRelease // true' .beta-release.json)
            
            echo "enabled=$ENABLED" >> $GITHUB_OUTPUT
            echo "version-strategy=$VERSION_STRATEGY" >> $GITHUB_OUTPUT
            echo "publish-tag=$PUBLISH_TAG" >> $GITHUB_OUTPUT
            echo "create-github-release=$CREATE_GITHUB_RELEASE" >> $GITHUB_OUTPUT
            
            echo "Beta release enabled: $ENABLED"
            echo "Version strategy: $VERSION_STRATEGY"
          else
            echo "No configuration file found, using defaults"
            echo "enabled=true" >> $GITHUB_OUTPUT
            echo "version-strategy=patch" >> $GITHUB_OUTPUT
            echo "publish-tag=beta" >> $GITHUB_OUTPUT
            echo "create-github-release=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '>=18'
          registry-url: 'https://registry.npmjs.org'
          scope: '@alex_neo'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: yarn --ignore-engines

      - name: Build project
        run: yarn build

      - name: Generate beta version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          VERSION_STRATEGY="${{ steps.config.outputs.version-strategy }}"
          echo "Version strategy: $VERSION_STRATEGY"
          
          # Check if current version is already a beta
          if [[ "$CURRENT_VERSION" =~ -beta\. ]]; then
            # If it's already a beta, increment the beta number
            BETA_NUMBER=$(echo "$CURRENT_VERSION" | sed -n 's/.*-beta\.\([0-9]*\).*/\1/p')
            NEW_BETA_NUMBER=$((BETA_NUMBER + 1))
            BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-beta\.[0-9]*$//')
            NEW_VERSION="$BASE_VERSION-beta.$NEW_BETA_NUMBER"
          else
            # If it's not a beta, create a new beta version based on strategy
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case $VERSION_STRATEGY in
              "major")
                NEW_MAJOR=$((MAJOR + 1))
                NEW_VERSION="$NEW_MAJOR.0.0-beta.0"
                ;;
              "minor")
                NEW_MINOR=$((MINOR + 1))
                NEW_VERSION="$MAJOR.$NEW_MINOR.0-beta.0"
                ;;
              *)
                NEW_PATCH=$((PATCH + 1))
                NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH-beta.0"
                ;;
            esac
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update package.json version
          npm version "$NEW_VERSION" --no-git-tag-version

      - name: Update changelog
        run: |
          # Generate changelog for the new beta version
          npx conventional-changelog -p angular -i CHANGELOG.md -s --first-release

      - name: Commit version changes
        run: |
          git add package.json CHANGELOG.md
          git commit -m "chore: release v${{ steps.version.outputs.new-version }}"
          git tag "v${{ steps.version.outputs.new-version }}"

      - name: Push changes
        run: |
          git push origin ${{ github.event.inputs.branch || 'main' }}
          git push origin "v${{ steps.version.outputs.new-version }}"

      - name: Build for publishing
        run: yarn build

      - name: Publish to npm
        run: yarn publish --access public --tag ${{ steps.config.outputs.publish-tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.config.outputs.create-github-release == 'true'
        run: |
          gh release create "v${{ steps.version.outputs.new-version }}" \
            --title "Release v${{ steps.version.outputs.new-version }}" \
            --notes "ðŸŽ‰ **Beta Release v${{ steps.version.outputs.new-version }}**

          This is a manual beta release.

          **Installation:**
          \`\`\`bash
          npm install @alex_neo/playwright-azure-reporter@${{ steps.config.outputs.publish-tag }}
          \`\`\`

          **Note:** This is a beta release for testing purposes. For production use, please use the latest stable release." \
            --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}